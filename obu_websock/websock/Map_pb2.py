# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Map.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import DefPosition_pb2 as DefPosition__pb2
import VxCommonDef_pb2 as VxCommonDef__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\tMap.proto\x12\x04vxII\x1a\x11\x44\x65\x66Position.proto\x1a\x11VxCommonDef.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xc1\x01\n\x12LaneTypeAttributes\x12\x11\n\x07vehicle\x18\x01 \x01(\rH\x00\x12\x13\n\tcrosswalk\x18\x02 \x01(\rH\x00\x12\x12\n\x08\x62ikeLane\x18\x03 \x01(\rH\x00\x12\x12\n\x08sidewalk\x18\x04 \x01(\rH\x00\x12\x10\n\x06median\x18\x05 \x01(\rH\x00\x12\x12\n\x08striping\x18\x06 \x01(\rH\x00\x12\x18\n\x0etrackedVehicle\x18\x07 \x01(\rH\x00\x12\x11\n\x07parking\x18\x08 \x01(\rH\x00\x42\x08\n\x06\x63hoice\"N\n\x0e\x43onnectingLane\x12\x0c\n\x04lane\x18\x01 \x01(\r\x12.\n\x08maneuver\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\"\x9c\x01\n\nConnection\x12\x31\n\x12remoteIntersection\x18\x01 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12,\n\x0e\x63onnectingLane\x18\x02 \x01(\x0b\x32\x14.vxII.ConnectingLane\x12-\n\x07phaseId\x18\x03 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\"m\n\x0eLaneAttributes\x12/\n\tshareWith\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12*\n\x08laneType\x18\x02 \x01(\x0b\x32\x18.vxII.LaneTypeAttributes\"\x9f\x02\n\x04Lane\x12\x0e\n\x06laneID\x18\x01 \x01(\r\x12/\n\tlaneWidth\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12,\n\x0elaneAttributes\x18\x03 \x01(\x0b\x32\x14.vxII.LaneAttributes\x12/\n\tmaneuvers\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12$\n\nconnectsTo\x18\x05 \x03(\x0b\x32\x10.vxII.Connection\x12/\n\x0bspeedLimits\x18\x06 \x03(\x0b\x32\x1a.vxII.RegulatorySpeedLimit\x12 \n\x06points\x18\x07 \x03(\x0b\x32\x10.vxII.Position3D\"l\n\x08Movement\x12\x31\n\x12remoteIntersection\x18\x01 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12-\n\x07phaseId\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\"\xe7\x01\n\x04Link\x12\x0c\n\x04name\x18\x01 \x01(\t\x12-\n\x0eupstreamNodeId\x18\x02 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12/\n\x0bspeedLimits\x18\x03 \x03(\x0b\x32\x1a.vxII.RegulatorySpeedLimit\x12\x11\n\tlinkWidth\x18\x04 \x01(\r\x12 \n\x06points\x18\x05 \x03(\x0b\x32\x10.vxII.Position3D\x12!\n\tmovements\x18\x06 \x03(\x0b\x32\x0e.vxII.Movement\x12\x19\n\x05lanes\x18\x07 \x03(\x0b\x32\n.vxII.Lane\"\xbc\x01\n\x0eProhibitedZone\x12\x35\n\x1b\x63\x65ntralCircleProhibitedZone\x18\x01 \x03(\x0b\x32\x10.vxII.Position3D\x12\x39\n\x1fnon_motorVehicleProhibitedZones\x18\x02 \x03(\x0b\x32\x10.vxII.Position3D\x12\x38\n\x1egridLineMarkingProhibitedZones\x18\x03 \x03(\x0b\x32\x10.vxII.Position3D\"a\n\x11SignalWaitingLane\x12\x11\n\tlaneWidth\x18\x01 \x01(\r\x12 \n\x06points\x18\x02 \x03(\x0b\x32\x10.vxII.Position3D\x12\x17\n\x0f\x61llowedPhaseIds\x18\x03 \x03(\r\"\xca\x01\n\x10\x43onnectingLaneEx\x12\x16\n\x0etarget_section\x18\x01 \x01(\r\x12\x13\n\x0btarget_lane\x18\x02 \x01(\x05\x12\x39\n\x13\x63onnectingLaneWidth\x18\x03 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12.\n\x14\x63onnectingLanePoints\x18\x04 \x03(\x0b\x32\x10.vxII.Position3D\x12\x1e\n\x16isolatedConnectingLane\x18\x05 \x01(\x08\"\xee\x01\n\x0c\x43onnectionEx\x12\x31\n\x12remoteIntersection\x18\x01 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12$\n\x03swl\x18\x02 \x01(\x0b\x32\x17.vxII.SignalWaitingLane\x12.\n\x0e\x63onnectingLane\x18\x03 \x03(\x0b\x32\x16.vxII.ConnectingLaneEx\x12-\n\x07phaseId\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12&\n\x0eturn_direction\x18\x05 \x01(\x0e\x32\x0e.vxII.Maneuver\")\n\x07STPoint\x12\x0e\n\x06s_axis\x18\x01 \x01(\x05\x12\x0e\n\x06t_axis\x18\x02 \x01(\x05\"\x7f\n\x0cLaneLineType\x12\x36\n\x0cleftLaneLine\x18\x01 \x01(\x0e\x32 .vxII.DottedSolidMarkingLineType\x12\x37\n\rrightLaneLine\x18\x02 \x01(\x0e\x32 .vxII.DottedSolidMarkingLineType\"\xd3\x02\n\x06LaneEx\x12\x11\n\tlaneRefID\x18\x01 \x01(\x05\x12/\n\tlaneWidth\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12,\n\x0elaneAttributes\x18\x03 \x01(\x0b\x32\x14.vxII.LaneAttributes\x12/\n\tmaneuvers\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12)\n\rconnectsTo_ex\x18\x05 \x03(\x0b\x32\x12.vxII.ConnectionEx\x12/\n\x0bspeedLimits\x18\x06 \x03(\x0b\x32\x1a.vxII.RegulatorySpeedLimit\x12 \n\tst_points\x18\x07 \x03(\x0b\x32\r.vxII.STPoint\x12(\n\x0claneLineType\x18\x08 \x01(\x0b\x32\x12.vxII.LaneLineType\"5\n\x07Section\x12\r\n\x05secId\x18\x01 \x01(\r\x12\x1b\n\x05lanes\x18\x02 \x03(\x0b\x32\x0c.vxII.LaneEx\"\xb1\x02\n\x06LinkEx\x12*\n\x04name\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12-\n\x0eupstreamNodeId\x18\x02 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12/\n\x0bspeedLimits\x18\x03 \x03(\x0b\x32\x1a.vxII.RegulatorySpeedLimit\x12/\n\tlinkWidth\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.UInt32Value\x12!\n\x07refLine\x18\x05 \x03(\x0b\x32\x10.vxII.Position3D\x12&\n\x0cmovements_ex\x18\x06 \x03(\x0b\x32\x10.vxII.MovementEx\x12\x1f\n\x08sections\x18\x07 \x03(\x0b\x32\r.vxII.Section\"\xe4\x01\n\x04Node\x12*\n\x04name\x18\x01 \x01(\x0b\x32\x1c.google.protobuf.StringValue\x12!\n\x02id\x18\x02 \x01(\x0b\x32\x15.vxII.NodeReferenceID\x12 \n\x06refPos\x18\x03 \x01(\x0b\x32\x10.vxII.Position3D\x12\x1b\n\x07inLinks\x18\x04 \x03(\x0b\x32\n.vxII.Link\x12 \n\ninLinks_ex\x18\x05 \x03(\x0b\x32\x0c.vxII.LinkEx\x12,\n\x0eprohibitedzone\x18\x06 \x01(\x0b\x32\x14.vxII.ProhibitedZone\"C\n\x03Map\x12\x0e\n\x06msgCnt\x18\x01 \x01(\x05\x12\x11\n\ttimeStamp\x18\x02 \x01(\r\x12\x19\n\x05nodes\x18\x03 \x03(\x0b\x32\n.vxII.Node*\xe0\x01\n\x1a\x44ottedSolidMarkingLineType\x12\x13\n\x0fwhiteDottedLine\x10\x00\x12\x12\n\x0ewhiteSolidLine\x10\x01\x12\x14\n\x10yellowDottedLine\x10\x02\x12\x13\n\x0fyellowSolidLine\x10\x03\x12\x19\n\x15whiteDotted_solidLine\x10\x04\x12\x1a\n\x16whiteSotted_dottedLine\x10\x05\x12\x1a\n\x16yellowDotted_solidLine\x10\x06\x12\x1b\n\x17yellowSotted_dottedLine\x10\x07*\xd6\x02\n\x10\x41llowedManeuvers\x12\x1b\n\x17maneuverStraightAllowed\x10\x00\x12\x17\n\x13maneuverLeftAllowed\x10\x01\x12\x18\n\x14maneuverRightAllowed\x10\x02\x12\x18\n\x14maneuverUTurnAllowed\x10\x03\x12 \n\x1cmaneuverLeftTurnOnRedAllowed\x10\x04\x12!\n\x1dmaneuverRightTurnOnRedAllowed\x10\x05\x12\x1d\n\x19maneuverLaneChangeAllowed\x10\x06\x12\x1d\n\x19maneuverNoStoppingAllowed\x10\x07\x12\x18\n\x14yieldAllwaysRequired\x10\x08\x12\x0e\n\ngoWithHalt\x10\t\x12\x0b\n\x07\x63\x61ution\x10\n\x12\x1e\n\x1areserved1_AllowedManeuvers\x10\x0b*\xd1\x01\n\x15LaneAttributesVehicle\x12\x1a\n\x16isVehicleRevocableLane\x10\x00\x12\x0e\n\nisRampLane\x10\x01\x12\x12\n\x0ehovLaneUseOnly\x10\x02\x12\x16\n\x12restrictedToBusUse\x10\x03\x12\x17\n\x13restrictedToTaxiUse\x10\x04\x12\x1b\n\x17restrictedFromPublicUse\x10\x05\x12\x11\n\remergencyLane\x10\x06\x12\x17\n\x13permissionOnRequest\x10\x07*\xc4\x02\n\x17LaneAttributesCrosswalk\x12\x1a\n\x16\x63rosswalkRevocableLane\x10\x00\x12,\n(bicyleUseAllowed_LaneAttributesCrosswalk\x10\x01\x12\x16\n\x12isXwalkFlyOverLane\x10\x02\x12\x12\n\x0e\x66ixedCycleTime\x10\x03\x12\x33\n/biDirectionalCycleTimes_LaneAttributesCrosswalk\x10\x04\x12\x17\n\x13hasPushToWalkButton\x10\x05\x12\x10\n\x0c\x61udioSupport\x10\x06\x12\x1a\n\x16rfSignalRequestPresent\x10\x07\x12\x37\n3unsignalizedSegmentsPresent_LaneAttributesCrosswalk\x10\x08*\xfe\x01\n\x12LaneAttributesBike\x12\x15\n\x11\x62ikeRevocableLane\x10\x00\x12\x18\n\x14pedestrianUseAllowed\x10\x01\x12\x15\n\x11isBikeFlyOverLane\x10\x02\x12%\n!fixedCycleTime_LaneAttributesBike\x10\x03\x12.\n*biDirectionalCycleTimes_LaneAttributesBike\x10\x04\x12\x15\n\x11isolatedByBarrier\x10\x05\x12\x32\n.unsignalizedSegmentsPresent_LaneAttributesBike\x10\x06*\x8b\x01\n\x16LaneAttributesSidewalk\x12\x1a\n\x16sidewalk_RevocableLane\x10\x00\x12+\n\'bicyleUseAllowed_LaneAttributesSidewalk\x10\x01\x12\x19\n\x15isSidewalkFlyOverLane\x10\x02\x12\r\n\twalkBikes\x10\x03*\xda\x01\n\x15LaneAttributesBarrier\x12\x18\n\x14median_RevocableLane\x10\x00\x12\n\n\x06median\x10\x01\x12\x14\n\x10whiteLineHashing\x10\x02\x12\x10\n\x0cstripedLines\x10\x03\x12\x16\n\x12\x64oubleStripedLines\x10\x04\x12\x10\n\x0ctrafficCones\x10\x05\x12\x17\n\x13\x63onstructionBarrier\x10\x06\x12\x13\n\x0ftrafficChannels\x10\x07\x12\x0c\n\x08lowCurbs\x10\x08\x12\r\n\thighCurbs\x10\t*\xd4\x01\n\x16LaneAttributesStriping\x12(\n$stripeToConnectingLanesRevocableLane\x10\x00\x12\x14\n\x10stripeDrawOnLeft\x10\x01\x12\x15\n\x11stripeDrawOnRight\x10\x02\x12\x1f\n\x1bstripeToConnectingLanesLeft\x10\x03\x12 \n\x1cstripeToConnectingLanesRight\x10\x04\x12 \n\x1cstripeToConnectingLanesAhead\x10\x05*\xa8\x01\n\x1cLaneAttributesTrackedVehicle\x12\x16\n\x12spec_RevocableLane\x10\x00\x12\x1e\n\x1aspec_commuterRailRoadTrack\x10\x01\x12\x1b\n\x17spec_lightRailRoadTrack\x10\x02\x12\x1b\n\x17spec_heavyRailRoadTrack\x10\x03\x12\x16\n\x12spec_otherRailType\x10\x04*\xbb\x01\n\x15LaneAttributesParking\x12\x18\n\x14parkingRevocableLane\x10\x00\x12\x18\n\x14parallelParkingInUse\x10\x01\x12\x16\n\x12headInParkingInUse\x10\x02\x12\x11\n\rdoNotParkZone\x10\x03\x12\x14\n\x10parkingForBusUse\x10\x04\x12\x15\n\x11parkingForTaxiUse\x10\x05\x12\x16\n\x12noPublicParkingUse\x10\x06*\xb6\x02\n\x0bLaneSharing\x12&\n\"overlappingLaneDescriptionProvided\x10\x00\x12!\n\x1dmultipleLanesTreatedAsOneLane\x10\x01\x12!\n\x1dotherNonMotorizedTrafficTypes\x10\x02\x12%\n!individualMotorizedVehicleTraffic\x10\x03\x12\x15\n\x11\x62usVehicleTraffic\x10\x04\x12\x16\n\x12taxiVehicleTraffic\x10\x05\x12\x16\n\x12pedestriansTraffic\x10\x06\x12\x19\n\x15\x63yclistVehicleTraffic\x10\x07\x12\x19\n\x15trackedVehicleTraffic\x10\x08\x12\x15\n\x11pedestrianTraffic\x10\tb\x06proto3')

_DOTTEDSOLIDMARKINGLINETYPE = DESCRIPTOR.enum_types_by_name['DottedSolidMarkingLineType']
DottedSolidMarkingLineType = enum_type_wrapper.EnumTypeWrapper(_DOTTEDSOLIDMARKINGLINETYPE)
_ALLOWEDMANEUVERS = DESCRIPTOR.enum_types_by_name['AllowedManeuvers']
AllowedManeuvers = enum_type_wrapper.EnumTypeWrapper(_ALLOWEDMANEUVERS)
_LANEATTRIBUTESVEHICLE = DESCRIPTOR.enum_types_by_name['LaneAttributesVehicle']
LaneAttributesVehicle = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESVEHICLE)
_LANEATTRIBUTESCROSSWALK = DESCRIPTOR.enum_types_by_name['LaneAttributesCrosswalk']
LaneAttributesCrosswalk = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESCROSSWALK)
_LANEATTRIBUTESBIKE = DESCRIPTOR.enum_types_by_name['LaneAttributesBike']
LaneAttributesBike = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESBIKE)
_LANEATTRIBUTESSIDEWALK = DESCRIPTOR.enum_types_by_name['LaneAttributesSidewalk']
LaneAttributesSidewalk = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESSIDEWALK)
_LANEATTRIBUTESBARRIER = DESCRIPTOR.enum_types_by_name['LaneAttributesBarrier']
LaneAttributesBarrier = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESBARRIER)
_LANEATTRIBUTESSTRIPING = DESCRIPTOR.enum_types_by_name['LaneAttributesStriping']
LaneAttributesStriping = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESSTRIPING)
_LANEATTRIBUTESTRACKEDVEHICLE = DESCRIPTOR.enum_types_by_name['LaneAttributesTrackedVehicle']
LaneAttributesTrackedVehicle = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESTRACKEDVEHICLE)
_LANEATTRIBUTESPARKING = DESCRIPTOR.enum_types_by_name['LaneAttributesParking']
LaneAttributesParking = enum_type_wrapper.EnumTypeWrapper(_LANEATTRIBUTESPARKING)
_LANESHARING = DESCRIPTOR.enum_types_by_name['LaneSharing']
LaneSharing = enum_type_wrapper.EnumTypeWrapper(_LANESHARING)
whiteDottedLine = 0
whiteSolidLine = 1
yellowDottedLine = 2
yellowSolidLine = 3
whiteDotted_solidLine = 4
whiteSotted_dottedLine = 5
yellowDotted_solidLine = 6
yellowSotted_dottedLine = 7
maneuverStraightAllowed = 0
maneuverLeftAllowed = 1
maneuverRightAllowed = 2
maneuverUTurnAllowed = 3
maneuverLeftTurnOnRedAllowed = 4
maneuverRightTurnOnRedAllowed = 5
maneuverLaneChangeAllowed = 6
maneuverNoStoppingAllowed = 7
yieldAllwaysRequired = 8
goWithHalt = 9
caution = 10
reserved1_AllowedManeuvers = 11
isVehicleRevocableLane = 0
isRampLane = 1
hovLaneUseOnly = 2
restrictedToBusUse = 3
restrictedToTaxiUse = 4
restrictedFromPublicUse = 5
emergencyLane = 6
permissionOnRequest = 7
crosswalkRevocableLane = 0
bicyleUseAllowed_LaneAttributesCrosswalk = 1
isXwalkFlyOverLane = 2
fixedCycleTime = 3
biDirectionalCycleTimes_LaneAttributesCrosswalk = 4
hasPushToWalkButton = 5
audioSupport = 6
rfSignalRequestPresent = 7
unsignalizedSegmentsPresent_LaneAttributesCrosswalk = 8
bikeRevocableLane = 0
pedestrianUseAllowed = 1
isBikeFlyOverLane = 2
fixedCycleTime_LaneAttributesBike = 3
biDirectionalCycleTimes_LaneAttributesBike = 4
isolatedByBarrier = 5
unsignalizedSegmentsPresent_LaneAttributesBike = 6
sidewalk_RevocableLane = 0
bicyleUseAllowed_LaneAttributesSidewalk = 1
isSidewalkFlyOverLane = 2
walkBikes = 3
median_RevocableLane = 0
median = 1
whiteLineHashing = 2
stripedLines = 3
doubleStripedLines = 4
trafficCones = 5
constructionBarrier = 6
trafficChannels = 7
lowCurbs = 8
highCurbs = 9
stripeToConnectingLanesRevocableLane = 0
stripeDrawOnLeft = 1
stripeDrawOnRight = 2
stripeToConnectingLanesLeft = 3
stripeToConnectingLanesRight = 4
stripeToConnectingLanesAhead = 5
spec_RevocableLane = 0
spec_commuterRailRoadTrack = 1
spec_lightRailRoadTrack = 2
spec_heavyRailRoadTrack = 3
spec_otherRailType = 4
parkingRevocableLane = 0
parallelParkingInUse = 1
headInParkingInUse = 2
doNotParkZone = 3
parkingForBusUse = 4
parkingForTaxiUse = 5
noPublicParkingUse = 6
overlappingLaneDescriptionProvided = 0
multipleLanesTreatedAsOneLane = 1
otherNonMotorizedTrafficTypes = 2
individualMotorizedVehicleTraffic = 3
busVehicleTraffic = 4
taxiVehicleTraffic = 5
pedestriansTraffic = 6
cyclistVehicleTraffic = 7
trackedVehicleTraffic = 8
pedestrianTraffic = 9


_LANETYPEATTRIBUTES = DESCRIPTOR.message_types_by_name['LaneTypeAttributes']
_CONNECTINGLANE = DESCRIPTOR.message_types_by_name['ConnectingLane']
_CONNECTION = DESCRIPTOR.message_types_by_name['Connection']
_LANEATTRIBUTES = DESCRIPTOR.message_types_by_name['LaneAttributes']
_LANE = DESCRIPTOR.message_types_by_name['Lane']
_MOVEMENT = DESCRIPTOR.message_types_by_name['Movement']
_LINK = DESCRIPTOR.message_types_by_name['Link']
_PROHIBITEDZONE = DESCRIPTOR.message_types_by_name['ProhibitedZone']
_SIGNALWAITINGLANE = DESCRIPTOR.message_types_by_name['SignalWaitingLane']
_CONNECTINGLANEEX = DESCRIPTOR.message_types_by_name['ConnectingLaneEx']
_CONNECTIONEX = DESCRIPTOR.message_types_by_name['ConnectionEx']
_STPOINT = DESCRIPTOR.message_types_by_name['STPoint']
_LANELINETYPE = DESCRIPTOR.message_types_by_name['LaneLineType']
_LANEEX = DESCRIPTOR.message_types_by_name['LaneEx']
_SECTION = DESCRIPTOR.message_types_by_name['Section']
_LINKEX = DESCRIPTOR.message_types_by_name['LinkEx']
_NODE = DESCRIPTOR.message_types_by_name['Node']
_MAP = DESCRIPTOR.message_types_by_name['Map']
LaneTypeAttributes = _reflection.GeneratedProtocolMessageType('LaneTypeAttributes', (_message.Message,), {
  'DESCRIPTOR' : _LANETYPEATTRIBUTES,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.LaneTypeAttributes)
  })
_sym_db.RegisterMessage(LaneTypeAttributes)

ConnectingLane = _reflection.GeneratedProtocolMessageType('ConnectingLane', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTINGLANE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.ConnectingLane)
  })
_sym_db.RegisterMessage(ConnectingLane)

Connection = _reflection.GeneratedProtocolMessageType('Connection', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTION,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Connection)
  })
_sym_db.RegisterMessage(Connection)

LaneAttributes = _reflection.GeneratedProtocolMessageType('LaneAttributes', (_message.Message,), {
  'DESCRIPTOR' : _LANEATTRIBUTES,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.LaneAttributes)
  })
_sym_db.RegisterMessage(LaneAttributes)

Lane = _reflection.GeneratedProtocolMessageType('Lane', (_message.Message,), {
  'DESCRIPTOR' : _LANE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Lane)
  })
_sym_db.RegisterMessage(Lane)

Movement = _reflection.GeneratedProtocolMessageType('Movement', (_message.Message,), {
  'DESCRIPTOR' : _MOVEMENT,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Movement)
  })
_sym_db.RegisterMessage(Movement)

Link = _reflection.GeneratedProtocolMessageType('Link', (_message.Message,), {
  'DESCRIPTOR' : _LINK,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Link)
  })
_sym_db.RegisterMessage(Link)

ProhibitedZone = _reflection.GeneratedProtocolMessageType('ProhibitedZone', (_message.Message,), {
  'DESCRIPTOR' : _PROHIBITEDZONE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.ProhibitedZone)
  })
_sym_db.RegisterMessage(ProhibitedZone)

SignalWaitingLane = _reflection.GeneratedProtocolMessageType('SignalWaitingLane', (_message.Message,), {
  'DESCRIPTOR' : _SIGNALWAITINGLANE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.SignalWaitingLane)
  })
_sym_db.RegisterMessage(SignalWaitingLane)

ConnectingLaneEx = _reflection.GeneratedProtocolMessageType('ConnectingLaneEx', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTINGLANEEX,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.ConnectingLaneEx)
  })
_sym_db.RegisterMessage(ConnectingLaneEx)

ConnectionEx = _reflection.GeneratedProtocolMessageType('ConnectionEx', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTIONEX,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.ConnectionEx)
  })
_sym_db.RegisterMessage(ConnectionEx)

STPoint = _reflection.GeneratedProtocolMessageType('STPoint', (_message.Message,), {
  'DESCRIPTOR' : _STPOINT,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.STPoint)
  })
_sym_db.RegisterMessage(STPoint)

LaneLineType = _reflection.GeneratedProtocolMessageType('LaneLineType', (_message.Message,), {
  'DESCRIPTOR' : _LANELINETYPE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.LaneLineType)
  })
_sym_db.RegisterMessage(LaneLineType)

LaneEx = _reflection.GeneratedProtocolMessageType('LaneEx', (_message.Message,), {
  'DESCRIPTOR' : _LANEEX,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.LaneEx)
  })
_sym_db.RegisterMessage(LaneEx)

Section = _reflection.GeneratedProtocolMessageType('Section', (_message.Message,), {
  'DESCRIPTOR' : _SECTION,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Section)
  })
_sym_db.RegisterMessage(Section)

LinkEx = _reflection.GeneratedProtocolMessageType('LinkEx', (_message.Message,), {
  'DESCRIPTOR' : _LINKEX,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.LinkEx)
  })
_sym_db.RegisterMessage(LinkEx)

Node = _reflection.GeneratedProtocolMessageType('Node', (_message.Message,), {
  'DESCRIPTOR' : _NODE,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Node)
  })
_sym_db.RegisterMessage(Node)

Map = _reflection.GeneratedProtocolMessageType('Map', (_message.Message,), {
  'DESCRIPTOR' : _MAP,
  '__module__' : 'Map_pb2'
  # @@protoc_insertion_point(class_scope:vxII.Map)
  })
_sym_db.RegisterMessage(Map)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _DOTTEDSOLIDMARKINGLINETYPE._serialized_start=3183
  _DOTTEDSOLIDMARKINGLINETYPE._serialized_end=3407
  _ALLOWEDMANEUVERS._serialized_start=3410
  _ALLOWEDMANEUVERS._serialized_end=3752
  _LANEATTRIBUTESVEHICLE._serialized_start=3755
  _LANEATTRIBUTESVEHICLE._serialized_end=3964
  _LANEATTRIBUTESCROSSWALK._serialized_start=3967
  _LANEATTRIBUTESCROSSWALK._serialized_end=4291
  _LANEATTRIBUTESBIKE._serialized_start=4294
  _LANEATTRIBUTESBIKE._serialized_end=4548
  _LANEATTRIBUTESSIDEWALK._serialized_start=4551
  _LANEATTRIBUTESSIDEWALK._serialized_end=4690
  _LANEATTRIBUTESBARRIER._serialized_start=4693
  _LANEATTRIBUTESBARRIER._serialized_end=4911
  _LANEATTRIBUTESSTRIPING._serialized_start=4914
  _LANEATTRIBUTESSTRIPING._serialized_end=5126
  _LANEATTRIBUTESTRACKEDVEHICLE._serialized_start=5129
  _LANEATTRIBUTESTRACKEDVEHICLE._serialized_end=5297
  _LANEATTRIBUTESPARKING._serialized_start=5300
  _LANEATTRIBUTESPARKING._serialized_end=5487
  _LANESHARING._serialized_start=5490
  _LANESHARING._serialized_end=5800
  _LANETYPEATTRIBUTES._serialized_start=90
  _LANETYPEATTRIBUTES._serialized_end=283
  _CONNECTINGLANE._serialized_start=285
  _CONNECTINGLANE._serialized_end=363
  _CONNECTION._serialized_start=366
  _CONNECTION._serialized_end=522
  _LANEATTRIBUTES._serialized_start=524
  _LANEATTRIBUTES._serialized_end=633
  _LANE._serialized_start=636
  _LANE._serialized_end=923
  _MOVEMENT._serialized_start=925
  _MOVEMENT._serialized_end=1033
  _LINK._serialized_start=1036
  _LINK._serialized_end=1267
  _PROHIBITEDZONE._serialized_start=1270
  _PROHIBITEDZONE._serialized_end=1458
  _SIGNALWAITINGLANE._serialized_start=1460
  _SIGNALWAITINGLANE._serialized_end=1557
  _CONNECTINGLANEEX._serialized_start=1560
  _CONNECTINGLANEEX._serialized_end=1762
  _CONNECTIONEX._serialized_start=1765
  _CONNECTIONEX._serialized_end=2003
  _STPOINT._serialized_start=2005
  _STPOINT._serialized_end=2046
  _LANELINETYPE._serialized_start=2048
  _LANELINETYPE._serialized_end=2175
  _LANEEX._serialized_start=2178
  _LANEEX._serialized_end=2517
  _SECTION._serialized_start=2519
  _SECTION._serialized_end=2572
  _LINKEX._serialized_start=2575
  _LINKEX._serialized_end=2880
  _NODE._serialized_start=2883
  _NODE._serialized_end=3111
  _MAP._serialized_start=3113
  _MAP._serialized_end=3180
# @@protoc_insertion_point(module_scope)
